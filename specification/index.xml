<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Metaschema Specification on Metaschema</title><link>https://framework.metaschema.dev/specification/</link><description>Recent content in Metaschema Specification on Metaschema</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://framework.metaschema.dev/specification/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://framework.metaschema.dev/specification/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://framework.metaschema.dev/specification/overview/</guid><description>Overview The Metaschema Information Modeling Framework provides a means to represent an information model for a given information domain, consisting of many related information elements, in a data format neutral form. By abstracting information modeling away from data format specific forms, the Metaschema Information Modeling Framework provides a means to consistently and sustainably maintain an information model, while avoiding the need to maintain each derivative data format individually. By consolidating information model maintenance into a single representation, significant time can be saved over other approaches that require each data format to be maintained individually.</description></item><item><title>Information Modeling</title><link>https://framework.metaschema.dev/specification/information-modeling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://framework.metaschema.dev/specification/information-modeling/</guid><description>Information Modeling The following diagram illustrates the relationships between information modeling concepts and the core structures provided by the Metaschema Framework.
An information model is an abstract representation of information from a given information domain. An information model is composed of a set of semantically well-defined information structures that each represent an information element in the information domain.
The primary purpose of the Metaschema Framework is to support the structured expression of an information model, which is represented as a Metaschema module.</description></item><item><title>Binding to XML, JSON, and YAML</title><link>https://framework.metaschema.dev/specification/mapping/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://framework.metaschema.dev/specification/mapping/</guid><description>Binding to XML, JSON, and YAML Note: This section of the specification is still a work in progress.
XML, JSON, and YAML each use specialized terminology and format primitives. As a notation for an object-based data, YAML is fairly similar to JSON, while XML is quite different to the other two. While all data format describe tree structures (directed graphs), each format (with its implicit data model) has its particular design, which requires specification in detail.</description></item><item><title>Metaschema Data Types</title><link>https://framework.metaschema.dev/specification/datatypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://framework.metaschema.dev/specification/datatypes/</guid><description>Data Types Used in Metaschema Metaschema is a strongly typed modeling language, that uses a collection of built in data types to represent data elements within a Metaschema-based model.
Metaschema&amp;rsquo;s data types represent a data-oriented, leaf nodes in a Metaschema-based model. These data types provide the basis for data elements that have clearly defined syntax and semantics.
There are 2 kinds of data types.
simple data types: that represent basic data value primitives with a specific syntax and semantics.</description></item><item><title>Metaschema Framework Specification Glossary</title><link>https://framework.metaschema.dev/specification/glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://framework.metaschema.dev/specification/glossary/</guid><description>Glossary The following terminology is used in this specification:
Assembly An assembly is defined as follows:
A complex named data element consisting of an optional set of flags and an optional sequence of model instances. An assembly does not have an associated value.
An assembly may reference or directly define zero or more flags. Flag instances associated with an assembly definition typically provide additional metadata used to identify or characterize the object represented by the assembly.</description></item></channel></rss>