<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Metaschema Syntax on Metaschema</title><link>https://framework.metaschema.dev/specification/syntax/</link><description>Recent content in Metaschema Syntax on Metaschema</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://framework.metaschema.dev/specification/syntax/index.xml" rel="self" type="application/rss+xml"/><item><title>Metaschema Module</title><link>https://framework.metaschema.dev/specification/syntax/module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://framework.metaschema.dev/specification/syntax/module/</guid><description>Metaschema Module A Metaschema module is represented using the top-level XML element &amp;lt;METASCHEMA&amp;gt;.
For example:
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;METASCHEMA xmlns=&amp;#34;http://csrc.nist.gov/ns/oscal/metaschema/1.0&amp;#34;&amp;gt; &amp;lt;schema-name&amp;gt;Computer Model&amp;lt;/schema-name&amp;gt; &amp;lt;schema-version&amp;gt;0.0.5&amp;lt;/schema-version&amp;gt; &amp;lt;short-name&amp;gt;computer&amp;lt;/short-name&amp;gt; &amp;lt;namespace&amp;gt;http://example.com/ns/computer&amp;lt;/namespace&amp;gt; &amp;lt;json-base-uri&amp;gt;http://example.com/ns/computer&amp;lt;/json-base-uri&amp;gt; &amp;lt;remarks&amp;gt; &amp;lt;p&amp;gt;This is an example model to describe the components of a computer.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;The &amp;#34;computer&amp;#34; element is the root element of this model.&amp;lt;/p&amp;gt; &amp;lt;/remarks&amp;gt; &amp;lt;!-- followed by a series of imports, then a series of definitions --&amp;gt; &amp;lt;/METASCHEMA&amp;gt; Attributes:
Attribute Data Type Use Default Value Section @abstract yes or no optional no Header: Abstract Module Elements:</description></item><item><title>Definitions</title><link>https://framework.metaschema.dev/specification/syntax/definitions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://framework.metaschema.dev/specification/syntax/definitions/</guid><description>Definitions A definition in a Metaschema module declares a reusable information element within an information model.
In graph theoretical terms, a definition provides a declaration of a graph node and any associated edges that form a given subgraph shape.
In object-oriented terms, a definition provides a declaration of a class, along with any associated class members.
The following subsections describe the common syntax for all definition types, followed by the semantic and syntax details of each type of definition.</description></item><item><title>Instances</title><link>https://framework.metaschema.dev/specification/syntax/instances/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://framework.metaschema.dev/specification/syntax/instances/</guid><description>Instances In a Metaschema module, complex information elements are created through composition. Through composition, an information element can be built by indicating which other information elements are used as its constituent parts.
An instance is used to declare an information element child within a parent information element. Each instance is a flag instance, field instance, or assembly instance, and either references an existing top-level definition by name or provides an inline definition.</description></item><item><title>Inline Definitions</title><link>https://framework.metaschema.dev/specification/syntax/inline-definitions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://framework.metaschema.dev/specification/syntax/inline-definitions/</guid><description>Inline Definitions Inline definitions are a mechanism to both define a named information element and instantiate it. In this way, inline definitions can be thought of as both definitions and instances, sharing most of the data elements of both.
Inline definitions are provided as a convenience to allow single-use information elements to be declared inline, within other definitions. Single-use, inline declarations are easier to maintain than a top-level definition that is referenced, since the maintainer doesn&amp;rsquo;t have to trace the reference.</description></item><item><title>Constraints</title><link>https://framework.metaschema.dev/specification/syntax/constraints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://framework.metaschema.dev/specification/syntax/constraints/</guid><description>Constraints Metaschema modules can define different kinds of constraints to support data validation within and between document instances.
The types of constraints allowed for a given definition
&amp;lt;define-flag&amp;gt; constraints The following constraint types are allowed for &amp;lt;define-flag&amp;gt; definitions.
&amp;lt;let&amp;gt; &amp;lt;allowed-values&amp;gt; &amp;lt;expect&amp;gt; &amp;lt;index-has-key&amp;gt; &amp;lt;matches&amp;gt; For each of these constraint types, use of the @target attribute is prohibited. This is because a flag constraint may only target the flag, since a flag has no child nodes.</description></item><item><title>Metaschema Data Types</title><link>https://framework.metaschema.dev/specification/syntax/datatypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://framework.metaschema.dev/specification/syntax/datatypes/</guid><description>Data Types Used in Metaschema Metaschema is a strongly typed modeling language, that uses a collection of built in data types to represent data elements within a Metaschema-based model.
Metaschema&amp;rsquo;s data types represent a data-oriented, leaf nodes in a Metaschema-based model. These data types provide the basis for data elements that have clearly defined syntax and semantics.
There are 2 kinds of data types.
simple data types: that represent basic data value primitives with a specific syntax and semantics.</description></item><item><title>Metapath Expression Language</title><link>https://framework.metaschema.dev/specification/syntax/metapath/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://framework.metaschema.dev/specification/syntax/metapath/</guid><description>Metapath Expression Language Metaschema includes support for an expression language called Metapath, which allows for selecting and evaluating Metaschema modules and data instances that conform to a Metaschema module. A Metapath can be used to query all Metaschema supported formats (i.e., JSON, YAML, XML) using a common, Metaschema module-bound syntax. This means a Metapth can be used to query the same data regardless of the underlying format used, as long as that data is bound to a Metaschema module.</description></item></channel></rss>