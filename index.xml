<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Metaschema Information Modeling Framework on Metaschema</title>
    <link>https://framework.metaschema.dev/</link>
    <description>Recent content in Metaschema Information Modeling Framework on Metaschema</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://framework.metaschema.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Metaschema Module</title>
      <link>https://framework.metaschema.dev/specification/syntax/module/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/specification/syntax/module/</guid>
      <description>&lt;h1 id=&#34;metaschema-module&#34;&gt;&lt;a href=&#34;#metaschema-module&#34;&gt;Metaschema Module&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;A &lt;em&gt;Metaschema module&lt;/em&gt; is represented using the top-level XML element &lt;code&gt;&amp;lt;METASCHEMA&amp;gt;&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;For example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;METASCHEMA&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://csrc.nist.gov/ns/oscal/metaschema/1.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;schema-name&amp;gt;&lt;/span&gt;Computer Model&lt;span class=&#34;nt&#34;&gt;&amp;lt;/schema-name&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;schema-version&amp;gt;&lt;/span&gt;0.0.5&lt;span class=&#34;nt&#34;&gt;&amp;lt;/schema-version&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;short-name&amp;gt;&lt;/span&gt;computer&lt;span class=&#34;nt&#34;&gt;&amp;lt;/short-name&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;namespace&amp;gt;&lt;/span&gt;http://example.com/ns/computer&lt;span class=&#34;nt&#34;&gt;&amp;lt;/namespace&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;json-base-uri&amp;gt;&lt;/span&gt;http://example.com/ns/computer&lt;span class=&#34;nt&#34;&gt;&amp;lt;/json-base-uri&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is an example model to describe the components of a computer.&lt;span class=&#34;nt&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The &amp;#34;computer&amp;#34; element is the root element of this model.&lt;span class=&#34;nt&#34;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- followed by a series of imports, then a series of definitions --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;/METASCHEMA&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Attributes:&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Attribute&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Data Type&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Use&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Default Value&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;Section&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/module/#abstract-modules&#34;&gt;&lt;code&gt;@abstract&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;optional&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;&lt;code&gt;no&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;Header: &lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/module/#abstract-modules&#34;&gt;Abstract Module&lt;/a&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;Elements:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Overview</title>
      <link>https://framework.metaschema.dev/specification/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/specification/overview/</guid>
      <description>&lt;h1 id=&#34;overview&#34;&gt;&lt;a href=&#34;#overview&#34;&gt;Overview&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;The &lt;em&gt;Metaschema Information Modeling Framework&lt;/em&gt; provides a means to represent an &lt;a href=&#34;https://framework.metaschema.dev/specification/glossary/#information-model&#34;&gt;&lt;em&gt;information model&lt;/em&gt;&lt;/a&gt; for a given &lt;a href=&#34;https://framework.metaschema.dev/specification/glossary/#domain&#34;&gt;&lt;em&gt;information domain&lt;/em&gt;&lt;/a&gt;, consisting of many related &lt;a href=&#34;https://framework.metaschema.dev/specification/glossary/#information-element&#34;&gt;&lt;em&gt;information elements&lt;/em&gt;&lt;/a&gt;, in a &lt;em&gt;data format&lt;/em&gt; neutral form. By abstracting information modeling away from &lt;em&gt;data format&lt;/em&gt; specific forms, the Metaschema Information Modeling Framework provides a means to consistently and sustainably maintain an &lt;em&gt;information model&lt;/em&gt;, while avoiding the need to maintain each derivative &lt;em&gt;data format&lt;/em&gt; individually. By consolidating &lt;em&gt;information model&lt;/em&gt; maintenance into a single representation, significant time can be saved over other approaches that require each &lt;em&gt;data format&lt;/em&gt; to be maintained individually.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Definitions</title>
      <link>https://framework.metaschema.dev/specification/syntax/definitions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/specification/syntax/definitions/</guid>
      <description>&lt;h1 id=&#34;definitions&#34;&gt;&lt;a href=&#34;#definitions&#34;&gt;Definitions&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;A &lt;em&gt;definition&lt;/em&gt; in a &lt;em&gt;Metaschema module&lt;/em&gt; declares a reusable &lt;a href=&#34;https://framework.metaschema.dev/specification/glossary/#information-element&#34;&gt;&lt;em&gt;information element&lt;/em&gt;&lt;/a&gt; within an &lt;a href=&#34;https://framework.metaschema.dev/specification/glossary/#information-model&#34;&gt;&lt;em&gt;information model&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In graph theoretical terms, a &lt;em&gt;definition&lt;/em&gt; provides a declaration of a graph &lt;em&gt;node&lt;/em&gt; and any associated &lt;em&gt;edges&lt;/em&gt; that form a given subgraph shape.&lt;/p&gt;&#xA;&lt;p&gt;In object-oriented terms, a &lt;em&gt;definition&lt;/em&gt; provides a declaration of a &lt;em&gt;class&lt;/em&gt;, along with any associated &lt;em&gt;class members&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The following subsections describe the &lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/definitions/#common-definition-data&#34;&gt;common syntax&lt;/a&gt; for all &lt;em&gt;definition&lt;/em&gt; types, followed by the semantic and syntax details of each type of &lt;em&gt;definition&lt;/em&gt;. The 3 types of &lt;em&gt;definitions&lt;/em&gt; are &lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/definitions/#top-level-define-flag&#34;&gt;&lt;code&gt;&amp;lt;define-flag&amp;gt;&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/definitions/#top-level-define-field&#34;&gt;&lt;code&gt;&amp;lt;define-field&amp;gt;&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/definitions/#top-level-define-assembly&#34;&gt;&lt;code&gt;&amp;lt;define-assembly&amp;gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Information Modeling</title>
      <link>https://framework.metaschema.dev/specification/information-modeling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/specification/information-modeling/</guid>
      <description>&lt;h1 id=&#34;information-modeling&#34;&gt;&lt;a href=&#34;#information-modeling&#34;&gt;Information Modeling&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;The following diagram illustrates the relationships between information modeling concepts and the core structures provided by the Metaschema Framework.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img alt=&#34;Information model / Metaschema module relationship&#34; id=&#34;h-rh-i-0&#34; src=&#34;../im-model.svg&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;An &lt;a href=&#34;https://framework.metaschema.dev/specification/glossary/#information-model&#34;&gt;&lt;em&gt;information model&lt;/em&gt;&lt;/a&gt; is an abstract representation of information from a given information &lt;a href=&#34;https://framework.metaschema.dev/specification/glossary/#domain&#34;&gt;&lt;em&gt;domain&lt;/em&gt;&lt;/a&gt;. An &lt;em&gt;information model&lt;/em&gt; is composed of a set of semantically well-defined information structures that each represent an &lt;a href=&#34;https://framework.metaschema.dev/specification/glossary/#information-element&#34;&gt;&lt;em&gt;information element&lt;/em&gt;&lt;/a&gt; in the information domain.&lt;/p&gt;&#xA;&lt;p&gt;The primary purpose of the Metaschema Framework is to support the structured expression of an information model, which is represented as a &lt;a href=&#34;https://framework.metaschema.dev/specification/glossary/#metaschema-module&#34;&gt;&lt;em&gt;Metaschema module&lt;/em&gt;&lt;/a&gt;. A Metaschema module is used to represent the whole or a part of an information model for a given information domain in an information-centric, format-neutral form.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Instances</title>
      <link>https://framework.metaschema.dev/specification/syntax/instances/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/specification/syntax/instances/</guid>
      <description>&lt;h1 id=&#34;instances&#34;&gt;&lt;a href=&#34;#instances&#34;&gt;Instances&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;In a Metaschema module, complex information elements are created through composition. Through composition, an information element can be built by indicating which other information elements are used as its constituent parts.&lt;/p&gt;&#xA;&lt;p&gt;An &lt;em&gt;instance&lt;/em&gt; is used to declare an information element &lt;em&gt;child&lt;/em&gt; within a &lt;em&gt;parent&lt;/em&gt; information element. Each instance is a &lt;em&gt;flag instance&lt;/em&gt;, &lt;em&gt;field instance&lt;/em&gt;, or &lt;em&gt;assembly instance&lt;/em&gt;, and either references an existing &lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/definitions/&#34;&gt;&lt;em&gt;top-level definition&lt;/em&gt;&lt;/a&gt; by name or provides an &lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/inline-definitions/&#34;&gt;&lt;em&gt;inline definition&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inline Definitions</title>
      <link>https://framework.metaschema.dev/specification/syntax/inline-definitions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/specification/syntax/inline-definitions/</guid>
      <description>&lt;h1 id=&#34;inline-definitions&#34;&gt;&lt;a href=&#34;#inline-definitions&#34;&gt;Inline Definitions&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;em&gt;Inline definitions&lt;/em&gt; are a mechanism to both define a named &lt;a href=&#34;https://framework.metaschema.dev/specification/glossary/#information-element&#34;&gt;&lt;em&gt;information element&lt;/em&gt;&lt;/a&gt; and instantiate it. In this way, &lt;em&gt;inline definitions&lt;/em&gt; can be thought of as both &lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/definitions/&#34;&gt;&lt;em&gt;definitions&lt;/em&gt;&lt;/a&gt; and &lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/instances/&#34;&gt;&lt;em&gt;instances&lt;/em&gt;&lt;/a&gt;, sharing most of the data elements of both.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Inline definitions&lt;/em&gt; are provided as a convenience to allow single-use &lt;em&gt;information elements&lt;/em&gt; to be declared inline, within other &lt;em&gt;definitions&lt;/em&gt;. Single-use, inline declarations are easier to maintain than a &lt;em&gt;top-level definition&lt;/em&gt; that is referenced, since the maintainer doesn&amp;rsquo;t have to trace the reference.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Constraints</title>
      <link>https://framework.metaschema.dev/specification/syntax/constraints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/specification/syntax/constraints/</guid>
      <description>&lt;h1 id=&#34;constraints&#34;&gt;&lt;a href=&#34;#constraints&#34;&gt;Constraints&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Metaschema modules can define different kinds of constraints to support data validation within and between document instances.&lt;/p&gt;&#xA;&lt;p&gt;The types of constraints allowed for a given definition&lt;/p&gt;&#xA;&lt;h2 id=&#34;define-flag-constraints&#34;&gt;&lt;a href=&#34;#define-flag-constraints&#34;&gt;&lt;code&gt;&amp;lt;define-flag&amp;gt;&lt;/code&gt; constraints&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;The following constraint types are allowed for &lt;code&gt;&amp;lt;define-flag&amp;gt;&lt;/code&gt; definitions.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/constraints/#let-expressions&#34;&gt;&lt;code&gt;&amp;lt;let&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/constraints/#allowed-values-constraints&#34;&gt;&lt;code&gt;&amp;lt;allowed-values&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/constraints/#expect-constraints&#34;&gt;&lt;code&gt;&amp;lt;expect&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/constraints/#index-has-key-constraints&#34;&gt;&lt;code&gt;&amp;lt;index-has-key&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/constraints/#matches-constraints&#34;&gt;&lt;code&gt;&amp;lt;matches&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;For each of these constraint types, use of the &lt;code&gt;@target&lt;/code&gt; attribute is prohibited. This is because a flag constraint may only target the flag, since a flag has no child nodes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Binding to XML, JSON, and YAML</title>
      <link>https://framework.metaschema.dev/specification/mapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/specification/mapping/</guid>
      <description>&lt;h1 id=&#34;binding-to-xml-json-and-yaml&#34;&gt;&lt;a href=&#34;#binding-to-xml-json-and-yaml&#34;&gt;Binding to XML, JSON, and YAML&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note: This section of the specification is still a work in progress.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;XML, JSON, and YAML each use specialized terminology and format primitives. As a notation for an object-based data, YAML is fairly similar to JSON, while XML is quite different to the other two. While all data format describe tree structures (directed graphs), each format (with its implicit data model) has its particular design, which requires specification in detail.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Metaschema Data Types</title>
      <link>https://framework.metaschema.dev/specification/datatypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/specification/datatypes/</guid>
      <description>&lt;h1 id=&#34;data-types-used-in-metaschema&#34;&gt;&lt;a href=&#34;#data-types-used-in-metaschema&#34;&gt;Data Types Used in Metaschema&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Metaschema is a strongly typed modeling language, that uses a collection of built in data types to represent data elements within a Metaschema-based model.&lt;/p&gt;&#xA;&lt;p&gt;Metaschema&amp;rsquo;s data types represent a data-oriented, leaf nodes in a Metaschema-based model. These data types provide the basis for data elements that have clearly defined syntax and semantics.&lt;/p&gt;&#xA;&lt;p&gt;There are 2 kinds of data types.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://framework.metaschema.dev/specification/datatypes/#simple-data-types&#34;&gt;simple data types:&lt;/a&gt;&lt;/strong&gt; that represent basic data value primitives with a specific syntax and semantics.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://framework.metaschema.dev/specification/datatypes/#markup-data-types&#34;&gt;markup data types:&lt;/a&gt;&lt;/strong&gt; that represent semantically formatted text that is intended for presentation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;A data type can be referenced in a metaschema definition within a &lt;code&gt;define-field&lt;/code&gt;, &lt;code&gt;field&lt;/code&gt;, &lt;code&gt;define-flag&lt;/code&gt;, or &lt;code&gt;flag&lt;/code&gt; component definition using the &lt;code&gt;@as-type&lt;/code&gt; attribute. The following are the allowed data types.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Metaschema Data Types</title>
      <link>https://framework.metaschema.dev/specification/syntax/datatypes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/specification/syntax/datatypes/</guid>
      <description>&lt;h1 id=&#34;data-types-used-in-metaschema&#34;&gt;&lt;a href=&#34;#data-types-used-in-metaschema&#34;&gt;Data Types Used in Metaschema&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Metaschema is a strongly typed modeling language, that uses a collection of built in data types to represent data elements within a Metaschema-based model.&lt;/p&gt;&#xA;&lt;p&gt;Metaschema&amp;rsquo;s data types represent a data-oriented, leaf nodes in a Metaschema-based model. These data types provide the basis for data elements that have clearly defined syntax and semantics.&lt;/p&gt;&#xA;&lt;p&gt;There are 2 kinds of data types.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/datatypes/#simple-data-types&#34;&gt;simple data types:&lt;/a&gt;&lt;/strong&gt; that represent basic data value primitives with a specific syntax and semantics.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://framework.metaschema.dev/specification/syntax/datatypes/#markup-data-types&#34;&gt;markup data types:&lt;/a&gt;&lt;/strong&gt; that represent semantically formatted text that is intended for presentation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;A data type can be referenced in a metaschema definition within a &lt;code&gt;define-field&lt;/code&gt;, &lt;code&gt;field&lt;/code&gt;, &lt;code&gt;define-flag&lt;/code&gt;, or &lt;code&gt;flag&lt;/code&gt; component definition using the &lt;code&gt;@as-type&lt;/code&gt; attribute. The following are the allowed data types.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Metapath Expression Language</title>
      <link>https://framework.metaschema.dev/specification/syntax/metapath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/specification/syntax/metapath/</guid>
      <description>&lt;h1 id=&#34;metapath-expression-language&#34;&gt;&lt;a href=&#34;#metapath-expression-language&#34;&gt;Metapath Expression Language&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Metaschema includes support for an expression language called &lt;em&gt;Metapath&lt;/em&gt;, which allows for selecting and evaluating Metaschema modules and data instances that conform to a Metaschema module. A Metapath can be used to query all Metaschema supported formats (i.e., JSON, YAML, XML) using a common, Metaschema module-bound syntax. This means a Metapth can be used to query the same data regardless of the underlying format used, as long as that data is bound to a Metaschema module. This provides consistent portability of Metapath expressions against multiple serialization forms for the same data set.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Metaschema Framework Specification Glossary</title>
      <link>https://framework.metaschema.dev/specification/glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/specification/glossary/</guid>
      <description>&lt;h1 id=&#34;glossary&#34;&gt;&lt;a href=&#34;#glossary&#34;&gt;Glossary&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;The following terminology is used in this specification:&lt;/p&gt;&#xA;&lt;h2 id=&#34;assembly&#34;&gt;&lt;a href=&#34;#assembly&#34;&gt;Assembly&lt;/a&gt;&lt;/h2&gt;&#xA;&lt;p&gt;An &lt;em&gt;assembly&lt;/em&gt; is defined as follows:&lt;/p&gt;&#xA;&#xA;&lt;div class=&#34;callout&#34;&gt;&#xA;    A complex named data element consisting of an optional set of &lt;a href=&#34;https://framework.metaschema.dev/#flag&#34;&gt;&lt;em&gt;flags&lt;/em&gt;&lt;/a&gt; and an optional sequence of model instances.&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;An assembly does not have an associated value.&lt;/p&gt;&#xA;&lt;p&gt;An assembly may reference or directly define zero or more &lt;a href=&#34;https://framework.metaschema.dev/specification/glossary/#flag&#34;&gt;&lt;em&gt;flags&lt;/em&gt;&lt;/a&gt;. Flag instances associated with an assembly definition typically provide additional metadata used to identify or characterize the object represented by the assembly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contact Us</title>
      <link>https://framework.metaschema.dev/contribute/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://framework.metaschema.dev/contribute/contact/</guid>
      <description>&lt;h1 id=&#34;contact-us&#34;&gt;&lt;a href=&#34;#contact-us&#34;&gt;Contact Us&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;p&gt;Please email the &lt;a href=&#34;mailto:maintainers@metaschema.dev&#34; rel=&#34;external&#34;&gt;project team&lt;/a&gt; with any questions you have about this project or if you are interested in getting involved.&lt;/p&gt;&#xA;&lt;p&gt;Please visit our &lt;a href=&#34;https://github.com/metaschema-framework/metaschema&#34; rel=&#34;external&#34;&gt;GitHub repository&lt;/a&gt; for more information, schemas, and examples.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
